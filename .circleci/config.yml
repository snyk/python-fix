version: 2.1
orbs:
  snyk: snyk/snyk@0.0.8

commands:
  checkout_and_install:
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: npm i root deps
          command: npm install --no-package-lock
      - run:
          name: lerna bootstrap
          command: ./node_modules/.bin/lerna bootstrap --no-ci --ignore-scripts
  run_lerna_tests:
    steps:
      - run:
          name: lerna run lint
          command: ./node_modules/.bin/lerna run lint
      - run:
          name: npm run test:ci
          command: npm run test:ci
  run_generic_test:
    parameters:
      package-name:
        type: string
    steps:
      - run:
          name: lerna run test --scope << parameters.package-name >> --stream
          command: ./node_modules/.bin/lerna run test --scope << parameters.package-name >> --stream
  run_test-poetry:
    parameters:
      node_version:
        type: string
      python_version:
        type: string
      poetry_version:
        type: string
    steps:
      - run:
          name: Poetry install << parameters.python_version >> && lerna run test --scope @snyk/fix-poetry --stream
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            # Switch to Node.js version
            nvm install $NODE_VERSION && nvm use $NODE_VERSION
            node -v && python --version && pip --version
            echo "Installing poetry version $POETRY_VERSION"
            pip install poetry==$POETRY_VERSION
            # Run node tests
            ./node_modules/.bin/lerna run test --scope @snyk/fix-poetry --stream
          environment:
            NODE_VERSION: << parameters.node_version >>
            PYTHON_VERSION: << parameters.python_version >>
            POETRY_VERSION: << parameters.poetry_version >>
  run_test-pipenv-pipfile:
    parameters:
      python_version:
        type: string
      pipenv_version:
        type: string
    steps:
      - run:
          name: pyenv install << parameters.python_version >> && lerna run test --scope @snyk/fix-pipenv-pipfile --stream
          command: |
            apt -qq update
            apt -qq install python3-pip python-pip -y &> /dev/null
            curl https://pyenv.run | $SHELL
            export PATH="/root/.pyenv/bin:$PATH"
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
            pyenv -v
            export PYTHON_VERSION_LATEST=`pyenv install --list | grep -v 'Available versions' | awk '{$1=$1};1' | grep "^$PYTHON_VERSION\.[0-9]\+$" | tail -1`
            # Install the specific release of Python if it isn't already installed
            pyenv install -s $PYTHON_VERSION_LATEST
            # Required for a specific test
            pyenv install -s 3.8.1
            pyenv sh-shell $PYTHON_VERSION_LATEST
            python --version
            export LANG="en_US.UTF-8"
            export LC_CTYPE="en_US.UTF-8"
            export PATH=$HOME/.local/bin:$PATH
            python -m pip install --user pipenv===$PIPENV_VER
            export PATH="$PATH:$HOME/.local/bin"
            python -m pipenv --version
            # Run node tests
            ./node_modules/.bin/lerna run test --scope @snyk/fix-pipenv-pipfile --stream
          environment:
            PYTHON_VERSION: << parameters.python_version >>
            PIPENV_VER: << parameters.pipenv_version >>
jobs:
  build-test:
    docker:
      - image: circleci/node:14
    steps:
      - checkout_and_install
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run_lerna_tests
  release:
    docker:
      - image: circleci/node:14
    steps:
      - checkout_and_install
      - run:
          name: lerna run build build && lerna publish --ignore-scripts --yes
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
            git config --global user.email "circleci@snyk.io"
            git config --global user.name "CircleCI"
            ./node_modules/.bin/lerna run build
            ./node_modules/.bin/lerna publish --ignore-scripts --yes
  test_pipenv-pipfile:
    parameters:
      node_version:
        type: string
      python_version:
        type: string
      pipenv_version:
        type: string
    docker:
      - image: node:<< parameters.node_version >>
    steps:
      - checkout_and_install
      - run_test-pipenv-pipfile:
          python_version: << parameters.python_version >>
          pipenv_version: << parameters.pipenv_version >>
  test_poetry:
    parameters:
      node_version:
        type: string
      python_version:
        type: string
      poetry_version:
        type: string
    docker:
      - image: circleci/python:<< parameters.python_version >>-node
    steps:
      - checkout_and_install
      - run_test-poetry:
          node_version: << parameters.node_version >>
          python_version: << parameters.python_version >>
          poetry_version: << parameters.poetry_version >>
  test_pip-requirements:
    parameters:
      node_version:
        type: string
    docker:
      - image: node:<< parameters.node_version >>
    steps:
      - checkout_and_install
      - run_generic_test:
          package-name: "@snyk/fix-pip-requirements"
  test_child-process:
    parameters:
      node_version:
        type: string
    docker:
      - image: node:<< parameters.node_version >>
    steps:
      - checkout_and_install
      - run_generic_test:
          package-name: "@snyk/child-process"
workflows:
  version: 2
  build-test:
    jobs:
      - build-test:
          context: nodejs-lib-release
          filters:
            branches:
              ignore:
                - main
                - /pull\/[0-9]+/
      - test_pipenv-pipfile:
          name: Package pipenv-pipfile | Node.js << matrix.node_version >> | Python << matrix.python_version >> | pyenv << matrix.pipenv_version >>
          matrix:
            parameters:
              node_version: ["10", "12", "14"]
              # Update the SUPPORTED.md as well if these versions change
              pipenv_version:
                [
                  "2020.11.4",
                  "2020.8.13",
                  "2020.6.2",
                  "2020.5.28",
                  "2018.11.26",
                ]
              # Update the SUPPORTED.md as well if these versions change
              python_version: ["3.9", "3.8", "3.7", "3.6", "2.7"]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /test_@snyk\/fix-pipenv-pipfile.*/
      - test_poetry:
          name: Package poetry | Node.js << matrix.node_version >> | Python << matrix.python_version >> | Poetry << matrix.poetry_version >>
          matrix:
            parameters:
              node_version: [
                #"10", "12",
                "14"]
              # Update the SUPPORTED.md as well if these versions change
              poetry_version:
                [
                  "1.1.6",
                  # "1.1.5",
                  # "1.1.4",
                  # "1.0.9",
                  # "1.0.8",
                  # "1.0.7",
                  # "0.12.17",
                  "0.12.16",
                ]
              # Update the SUPPORTED.md as well if these versions change
              python_version: ["3.9", "3.8", "3.7", "3.6", "2.7"]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /test_@snyk\/fix-poetry.*/
      - test_pip-requirements:
          name: Package pip-requirements | Node.js << matrix.node_version >>
          matrix:
            parameters:
              node_version: ["10", "12", "14"]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /test_@snyk\/fix-pip-requirements.*/
      - test_child-process:
          name: Package child-process | Node.js << matrix.node_version >>
          matrix:
            parameters:
              node_version: ["10", "12", "14"]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /test_@snyk\/child-process.*/
      - release:
          name: Release
          context: nodejs-lib-release
          filters:
            branches:
              only:
                - main
